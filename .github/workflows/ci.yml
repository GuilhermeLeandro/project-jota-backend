name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    name: Build Docker Images and Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose plugin
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin # Instala o plugin 'docker compose'

    - name: Set up Docker Compose environment variables
      run: |
        echo "Criando arquivo .env para CI..."
        # ... (restante do passo .env igual) ...
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=False" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=3306" >> .env
        echo "CELERY_BROKER_URL=redis://redis:6379/0" >> .env
        echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> .env
        echo "Arquivo .env criado para CI."
        echo "Conteúdo do .env de CI (exceto senhas):"
        grep -v 'PASSWORD\|SECRET_KEY' .env || echo ".env não contém linhas sem senha/secret key"

    - name: Build Docker images
      run: docker compose build

    - name: Start dependent services (DB and Redis)
      run: |
        docker compose up -d db redis # <--- MUDANÇA
        echo "Esperando DB e Redis iniciarem e passarem nos healthchecks..."
        sleep 20

    - name: Check running containers
      run: docker ps

    - name: Run tests
      run: docker compose exec -T web pytest

    - name: Stop services
      if: always()
      run: docker compose down