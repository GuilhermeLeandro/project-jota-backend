name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    name: Build Docker Images and Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Instalação manual do Docker Compose (plugin v2)
    - name: Install Docker Compose v2 plugin
      run: |
        echo "Installing Docker Compose v2 plugin..."
        COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        echo "Latest Docker Compose version: $COMPOSE_VERSION"
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
        echo "Verifying docker compose version..."
        docker compose version || echo "'docker compose version' failed"
        echo "Verifying docker-compose (hyphen) version..."
        docker-compose --version || echo "'docker-compose --version' failed (expected)"
        echo "Done installing compose plugin."

    - name: Set up Docker Compose environment variables
      run: |
        echo "Criando arquivo .env para CI..."
        # ALERTA: Certifique-se que os Secrets correspondentes foram criados no GitHub!
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DEBUG=False" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "DB_HOST=db" >> .env
        echo "DB_PORT=3306" >> .env
        echo "CELERY_BROKER_URL=redis://redis:6379/0" >> .env
        echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> .env
        echo "Arquivo .env criado para CI."
        echo "Conteúdo do .env de CI (exceto senhas):"
        grep -v 'PASSWORD\|SECRET_KEY' .env || echo ".env não contém linhas sem senha/secret key"

    - name: Build Docker images
      run: docker compose build

    - name: Start dependent services (DB and Redis)
      run: |
        docker compose up -d db redis # Usa 'docker compose'
        echo "Esperando DB e Redis iniciarem e passarem nos healthchecks..."
        sleep 20

    - name: Check running containers
      run: docker ps

    - name: Run tests
      run: docker compose exec -T web pytest

    - name: Stop services
      if: always()
      run: docker compose down